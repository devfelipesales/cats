generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String     @id @default(uuid())
  profile  String?    @unique @default(uuid())
  name     String     
  email    String?    @unique
  password String?
  image    String?
  photos   Photos[]
  comments Comments[]
  views     Views[]
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  sessions      Session[]
  addedBy       Friend[]  @relation("whoAdd")
  added         Friend[]  @relation("userAdded")
}

// Next Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text 
  expires_at        Int?    
  token_type        String? 
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Photos {
  id        String     @id 
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  name      String     @db.VarChar(20)
  age       Int
  weight    Int
  createdAt DateTime   @default(now())
  filepath  String
  comments  Comments[]
  views     Views[]
  
}

model Comments {
  id        String   @id @default(uuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  photoId   String
  photo     Photos   @relation(fields: [photoId], references: [id])
  comment   String
  createdAt DateTime @default(now())
}

model Views {
  id          String   @id @default(uuid())
  photoId     String
  photo       Photos   @relation(fields: [photoId], references: [id])
  viewedBy    String   
  user        User    @relation(fields: [viewedBy], references: [id])
  createdAt   DateTime @default(now())
}

model Friend {
  id            String   @id @default(uuid())
  userWhoAdd    String
  userAdded     String
  AddedBy       User      @relation("whoAdd" ,fields: [userWhoAdd], references: [profile])
  Added         User      @relation("userAdded" ,fields: [userAdded], references: [profile])
  createdAt     DateTime @default(now())
  status        FriendStatus?   
}

enum FriendStatus {
  ACCEPTED
  PENDING
  REJECTED
}